
<MudDialog>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12">
                <MudText Typo="Typo.h4">@pointVente.Designation</MudText>
            </MudItem>
        </MudGrid>
        <MudTable Items="@list" Dense="@true" Hover="@true" Bordered="@false" Striped="@true">
            <HeaderContent>
                <MudTh>Nr</MudTh>
                <MudTh>Article</MudTh>
                <MudTh>Prix de vente</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Nr">@context.Num</MudTd>
                <MudTd DataLabel="Article">@context.Article</MudTd>
                <MudTd DataLabel="Prix de vente">@context.PrixVente.ToString()</MudTd>
                <MudTd>
                    <MudChip T="string" Color="@(context.Active? Color.Success : Color.Error)">@(context.Active ? "Activé" : "Désactivé")</MudChip>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </DialogContent>
</MudDialog>

@code {
    PointVenteViewModel pointVente;
    [Parameter] public int Id { get; set; }
    List<PrixPointVenteViewModel> list = new List<PrixPointVenteViewModel>();
    [Inject] PointVenteService datacontext { get; set; }

    protected override async Task OnInitializedAsync()
    {
        pointVente = await datacontext.Open(Id);

        int num = 1;
        foreach (var i in pointVente.PrixVentes)
        {
            list.Add(new PrixPointVenteViewModel()
                {
                    Num = num,
                    PrixVente = i.PrixVente,
                    Article = i.Article,
                    Active = i.Active,
                });
            num++;
        }
    }
}
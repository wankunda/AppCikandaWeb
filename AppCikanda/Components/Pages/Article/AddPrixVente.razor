
<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">@article?.Designation</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @bind-IsValid="@success" @bind-Errors="@errors" Class="mx-auto">
            <MudGrid>
                <MudItem xs="12">
                    <MudField Label="Prix d'achat">@article.PrixAchat.ToString()</MudField>
                </MudItem>
                <MudItem xs="12">
                    <MudSelect Dense="true" T="int" Label="Sélectionner un point de vente" Variant="Variant.Text" @bind-Value="model.IdPointVente"
                    Required="true" RequiredError="Le point de vente est obligatoire !">
                        @foreach (var i in pointVentes)
                        {
                            <MudSelectItem Value="@i.Id">@i.Designation</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField T="float" Label="Prix de vente" Required="true" RequiredError="Le prix de vente est obligatoire !" @bind-Value="model.Value" />
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Success" Class="ml-auto" OnClick="Valide">Valider</MudButton>
    </DialogActions>
</MudDialog>

@code {
    PrixVenteAddModel model;
    ArticleViewModel article;
    bool success;
    string[] errors = { };
    [Inject] PrixVenteService datacontext { get; set; }
    [Inject] ISnackbar snackbar { get; set; }
    List<PointVenteViewModel> pointVentes = new();

    [Parameter] public int Id { get; set; }
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }

    protected override async Task OnInitializedAsync()
    {
        model = new();
        article = await datacontext.GetArticle(Id);
        pointVentes = (await datacontext.GetPointVentes(Id)).ToList();
    }

    async void Valide()
    {
        model.IdArticle = Id;
        Response rep = await datacontext.Add(model);

        snackbar.Add(rep.Message, (Severity)rep.TypeResponse);
    }
}
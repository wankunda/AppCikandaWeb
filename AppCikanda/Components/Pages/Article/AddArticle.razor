
<MudDialog>
    <DialogContent>
        <MudForm @bind-IsValid="@success" @bind-Errors="@errors" Class="mx-auto">
            <MudGrid>
                <MudItem xs="12" sm="6" md="6">
                    <MudTextField T="string" Label="Désignation" Required="true" RequiredError="La désignation de l'article est obligatoire !" @bind-Value="produit.Designation" />
                </MudItem>
                <MudItem xs="12" sm="6" md="6">
                    <MudSelect Dense="true" T="Guid" Label="Sélectionner une catégorie" Variant="Variant.Text" @bind-Value="produit.IdCategory"
                               Required="true" RequiredError="La catégorie est requise !">
                        @foreach (var i in Catégories)
                        {
                            <MudSelectItem Value="@i.Id">@i.Libellé</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="6" md="6">
                    <MudTextField T="int" Label="Stock Initial"  @bind-Value="produit.StockInitial" />
                </MudItem>
                <MudItem xs="12" sm="6" md="6">
                    <MudTextField T="int" Label="Description" @bind-Value="produit.PrixAchat" />
                </MudItem>
                <MudItem xs="12">
                    <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
                        <ActivatorContent>
                            <MudFab Color="Color.Success"
                                    StartIcon="@Icons.Material.Filled.AttachFile" />
                        </ActivatorContent>
                    </MudFileUpload>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Success" Class="ml-auto" OnClick="Valide">Valider</MudButton>
    </DialogActions>
</MudDialog>


@code {
    Produit produit;
    bool old;
    bool success;
    string[] errors = { };
    [Inject] ProduitService datacontext { get; set; }
    [Inject] ISnackbar snackbar { get; set; }

    List<Category> Catégories = new();

    [Parameter] public Guid Id { get; set; }
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }


    string path = "", paths = "";
    IBrowserFile photo;
    long maxFileSize = 1024 * 1024 * 15;
    private async void UploadFiles(IBrowserFile file)
    {
        try
        {
            photo = file;
            string dossier = Path.Combine(Environment.CurrentDirectory, "wwwroot", "images");
            string sousdossier = Path.Combine(Environment.CurrentDirectory, "wwwroot", "images", "produits");

            if (!Directory.Exists(dossier)) Directory.CreateDirectory(dossier);
            if (!Directory.Exists(sousdossier)) Directory.CreateDirectory(sousdossier);

            path = Path.Combine("images", "produits", produit.Designation + photo.Name).Replace('\\', '/');
            paths = Path.Combine(Environment.CurrentDirectory, "wwwroot", "images", "produits", produit.Designation + photo.Name);
            await using FileStream fs = new(paths, FileMode.Create);
            await photo.OpenReadStream(maxFileSize).CopyToAsync(fs);
            produit.Image = path;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            path = ex.Message;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (Id == Guid.Empty)
        {
            produit = new();
            old = false;
        }
        else
        {
            produit = await datacontext.Get(Id);
            old = true;
        }

        Catégories = (await datacontext.GetCategories()).ToList();
    }

    async void Valide()
    {
        produit.Designation = produit.Designation.ToUpper();

        if (produit.Image == null)
        {
            var photo = "produit.png";
            produit.Image = Path.Combine("images", "produits", photo).Replace('\\', '/');
        }

        Response rep;
        if (old)
            rep = await datacontext.Update(produit);
        else
            rep = await datacontext.Add(produit);

        snackbar.Add(rep.Message, (Severity)rep.TypeResponse);
    }
}
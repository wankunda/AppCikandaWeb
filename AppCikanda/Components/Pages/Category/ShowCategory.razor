
<MudDialog>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12">
                <MudText Typo="Typo.h4">@category.Designation</MudText>
            </MudItem>
        </MudGrid>
        <MudTable Items="@list" Dense="@true" Hover="@true" Bordered="@false" Striped="@true">
            <HeaderContent>
                <MudTh>Num</MudTh>
                <MudTh>Désignation</MudTh>
                <MudTh>Stock initial</MudTh>
                <MudTh>Stock de sécurité</MudTh>
                <MudTh>Prix d'achat</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Num">@context.Num</MudTd>
                <MudTd DataLabel="Désignation">@context.Designation</MudTd>
                <MudTd DataLabel="Stock initial">@context.StockInitial</MudTd>
                <MudTd DataLabel="Stock de sécurité">@context.StockSeuil</MudTd>
                <MudTd DataLabel="Prix d'achat">@context.PrixAchat.ToString()</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager HideRowsPerPage="true" />
            </PagerContent>
        </MudTable>
    </DialogContent>
</MudDialog>

@code {
    CategoryViewModel category;
    [Parameter] public int Id { get; set; }
    List<CategoryProduitViewModel> list = new List<CategoryProduitViewModel>();
    [Inject] CategoryService datacontext { get; set; }

    protected override async Task OnInitializedAsync()
    {
        category = await datacontext.Open(Id);

        int num = 1;
        foreach (var i in category.Articles)
        {
            list.Add(new CategoryProduitViewModel
                {
                    Num = num,
                    Designation = i.Designation,
                    StockInitial = i.StockInitial,
                    StockSeuil= i.StockSeuil,
                    PrixAchat = i.PrixAchat
                });
                num++;
        }
    }
}
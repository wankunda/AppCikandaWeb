@page "/list-categories"


    <MudTable Items="@Elements" Dense="true" Hover="true" Bordered="true" Striped="true" Filter="new Func<CategoryViewModel,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Liste des catégories</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Rechercher" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            <MudSpacer />
        <MudTooltip Text="Ajouter une catégorie" Color="Color.Primary" Placement="Placement.Top" Arrow="true">
            <MudIconButton Color="Color.Primary" Variant="Variant.Filled" OnClick="add" Icon="@Icons.Material.Filled.Add" />
        </MudTooltip>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Nr</MudTh>
            <MudTh>Désignation</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nr">@context.Num</MudTd>
            <MudTd DataLabel="Désignation">@context.Désignation</MudTd>
            <MudTd>
                <MudTooltip Text="Voir plus" Color="Color.Primary" Placement="Placement.Top" Arrow="true">
                    <MudIconButton Color="Color.Primary" Variant="Variant.Filled" OnClick="()=>show(context.Code)" Icon="@Icons.Material.Filled.ChevronRight" />
                </MudTooltip>
                <MudTooltip Text="Modifier" Color="Color.Success" Placement="Placement.Top" Arrow="true">
                    <MudIconButton Color="Color.Success" Variant="Variant.Filled" OnClick="()=>edit(context.Code)" Icon="@Icons.Material.Filled.Edit" />
                </MudTooltip>
                <MudTooltip Text="Supprimer" Color="Color.Error" Placement="Placement.Top" Arrow="true">
                    <MudIconButton Color="Color.Error" Variant="Variant.Filled" OnClick="()=>delete(context.Code)" Icon="@Icons.Material.Filled.Delete" />
                </MudTooltip>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager HideRowsPerPage="true" />
        </PagerContent>
    </MudTable>

    <div class="d-flex flex-wrap mt-4">
        <div style="min-width:200px;">
            <MudText Class="align-self-center d-inline">Catégorie sélectionnée : @selectedItem1?.Désignation</MudText>
        </div>
    </div>


@code {
    private string searchString1 = "";
    private CategoryViewModel selectedItem1 = null;
    [Inject] private IDialogService DialogService { get; set; }
    [Parameter] public Guid Id { get; set; }
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }
    [Inject] CategoryService datacontext { get; set; }
    [Inject] ISnackbar snackbar { get; set; }

    private List<CategoryViewModel> Elements = new List<CategoryViewModel>();

    protected override async Task OnInitializedAsync()
    {
        GetData();
    }

    async void GetData()
    {
        var data = await datacontext.GetAll();

        int num = 1;
        foreach (var i in data)
        {
            Elements.Add(new CategoryViewModel
                {
                    Num = num,
                    Code = i.Id,
                    Désignation = i.Libellé
                });
                num++;
        }
        StateHasChanged();
    }

    async void delete(Guid id)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Suppression",
            "Voulez - vous supprimer cette catégorie ?",
            yesText: "Confirmer !", cancelText: "Annuler");
        if (result == true)
        {
            var rep = await datacontext.Delete(id);
            snackbar.Add(rep.Message, (Severity)rep.TypeResponse);
            GetData();           
        }
    }

    async void add()
    {
        DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = await DialogService.ShowAsync<AddCategory>("Ajouter une catégorie", maxWidth);
        var result = await dialog.Result;
        if (result.Canceled)
            GetData();
    }

    async void show(Guid id)
    {
        DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.ExtraLarge, FullWidth = true, Position = DialogPosition.TopCenter };
        var parameters = new DialogParameters<ShowCategory> { { x => x.Id, id } };
        await DialogService.ShowAsync<ShowCategory>("Detail de la catégorie", parameters, maxWidth);
    }

    async void edit(Guid id)
    {
        DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true };
        var parameters = new DialogParameters<AddCategory> { { x => x.Id, id } };
        var dialog = await DialogService.ShowAsync<AddCategory>("Modifier une catégorie", parameters, maxWidth);
        var result = await dialog.Result;
        if (result.Canceled)
            GetData();
    }

    private bool FilterFunc1(CategoryViewModel element) => FilterFunc(element, searchString1);

    private bool FilterFunc(CategoryViewModel element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Désignation.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}

@page "/depenses"

<MudTable Items="@Elements" Dense="true" Hover="true" Bordered="true" Striped="false" Filter="new Func<DepenseViewModel,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Liste des dépenses</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Rechercher" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudSpacer />
        <MudTooltip Text="Ajouter un article" Color="Color.Primary" Placement="Placement.Top" Arrow="true">
            <MudIconButton Color="Color.Primary" Variant="Variant.Filled" OnClick="add" Icon="@Icons.Material.Filled.Add" />
        </MudTooltip>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Num</MudTh>
        <MudTh>Bénéficiaire</MudTh>
        <MudTh>Montant reçu</MudTh>
        <MudTh>Motif</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Num">@context.Num</MudTd>
        <MudTd DataLabel="Catégorie">@context.Beneficiaire</MudTd>
        <MudTd DataLabel="Désignation">@context.Montant.ToString()</MudTd>
        <MudTd DataLabel="Prix d'achat">@context.Motif</MudTd>
        <MudTd>
            <MudTooltip Text="Modifier" Color="Color.Success" Placement="Placement.Top" Arrow="true">
                <MudIconButton Color="Color.Success" Variant="Variant.Filled" OnClick="()=>edit(context.Id)" Icon="@Icons.Material.Filled.Edit" />
            </MudTooltip>
            <MudTooltip Text="Supprimer" Color="Color.Error" Placement="Placement.Top" Arrow="true">
                <MudIconButton Color="Color.Error" Variant="Variant.Filled" OnClick="()=>delete(context.Id)" Icon="@Icons.Material.Filled.Delete" />
            </MudTooltip>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager HideRowsPerPage="true" />
    </PagerContent>
</MudTable>

<div class="d-flex flex-wrap mt-4">
    <div style="min-width:200px;">
        <MudText Class="align-self-center d-inline">Dépense sélectionnée : @selectedItem1?.Beneficiaire a reçu un montant de : @selectedItem1?.Montant.ToString()</MudText>
    </div>
</div>


@code {
    private string searchString1 = "";
    private DepenseViewModel selectedItem1 = null;
    [Inject] private IDialogService DialogService { get; set; }
    ﻿[Inject] DepenseService datacontext { get; set; }
    [Inject] ISnackbar snackbar { get; set; }
    private List<DepenseViewModel> Elements = new List<DepenseViewModel>();

    protected override async Task OnInitializedAsync()
    {
        GetData();
    }

    async void GetData()
    {
        Elements = (await datacontext.GetAll()).ToList();

        StateHasChanged();
    }


    async void add()
    {
        DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = await DialogService.ShowAsync<AddDepense>("Ajouter une dépense",maxWidth);
        var result = await dialog.Result;
        if (result.Canceled)
            GetData();
    }

    async void edit(int id)
    {
        DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true };
        var parameters = new DialogParameters<AddDepense> { { x => x.Id, id } };
        var dialog = await DialogService.ShowAsync<AddDepense>("Modifier une dépense", parameters, maxWidth);
        var result = await dialog.Result;
        if (result.Canceled)
            GetData();
    }

    async void delete(int id)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Suppression",
            "Voulez - vous supprimer cette dépense ?",
            yesText: "Confirmer !", cancelText: "Annuler");
        if (result == true)
        {
            var rep = await datacontext.Delete(id);
            snackbar.Add(rep.Message, (Severity)rep.TypeResponse);
            GetData();
        }
    }

    private bool FilterFunc1(DepenseViewModel element) => FilterFunc(element, searchString1);

    private bool FilterFunc(DepenseViewModel element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Beneficiaire.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Motif.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
            if (element.Montant.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}